package org.example.repository;

import org.example.model.Author;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import java.util.List;
import java.util.Optional;

/**
 * Handles database operations for Author entities.
 * Inherits standard CRUD methods from JpaRepository.
 */
public interface AuthorRepository extends BaseRepository<Author, Long> {

    /**
     * Finds an author by first and last name (exact match).
     * Auto-generated by Spring Data JPA from method name.
     */
    Optional<Author> findByFirstNameAndLastName(String firstName, String lastName);

    /**
     * Finds an author by email (exact match).
     * Uses the unique email constraint defined in the Author entity.
     */
    Optional<Author> findByEmail(String email);

    /**
     * Custom query to search authors by keyword in biography.
     *
     * @param keyword Search term (case-insensitive partial match)
     * @return List of authors with biographies containing the keyword
     */
    @Query("SELECT a FROM Author a WHERE LOWER(a.biography) LIKE LOWER(CONCAT('%', :keyword, '%'))")
    List<Author> searchByBiographyKeyword(@Param("keyword") String keyword);
}